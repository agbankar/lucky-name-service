package com.ashish.service;

import com.ashish.model.LuckyRequest;
import com.ashish.model.LuckyResponse;
import com.ashish.util.Utils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;

import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;

import java.util.Map;
import java.util.Set;
import java.util.HashSet;

/**
 * This Service is responsible for checking if name is lucky
 *
 * @author Ashish Bankar
 * @version 1.0
 * @since 2020-02-22
 */
@Service
public class LuckyServiceImpl implements LuckyService {
    @Autowired
    Map<Character, Integer> charValuesMap;
    @Autowired
    @Qualifier("vowelsMap")
    Map<Character, Integer> vowelsMap;
    private static final Logger logger = LogManager.getLogger ( LuckyServiceImpl.class );


    /**
     * This is the main method which makes use of generateLuckyNames method.
     *
     * @param name Name of the user.
     * @param dob  dab of the user.
     * @return LuckyResponse.
     */
    public LuckyResponse checkLuckyName ( String name, String dob ) {
        logger.info ( "Inside Service :" + name + "  " + dob );
        final LuckyRequest request = this.createLuckyRequest ( name, dob );
        logger.info ( "Created Lucky Request" + request.toString () );

        Map<Character, Set<String>> luckyNames;
        int additionByDob = this.calculateDigitsSum ( Utils.getdobAsNumber (
                request.getDateOfBirth () ) );
        int additionByName = this.calculateDigitsSum ( this.getAdditionByName ( request ) );
        if (additionByDob == additionByName) {
            logger.info ( "Lucky name" + request.toString () );

            return new LuckyResponse ( "Name is lucky", "" );
        } else {
            logger.info ( "Not a lucky name , Checking for lucky names" + request.toString () );

            luckyNames = this.generateLuckyNames ( request );
        }
        return this.createLuckyResponse ( request, luckyNames );
    }

    /**
     * @param input
     * @return int  calculate sum of digits of int
     * e.g. 1235--> 1+2+3+5= 11
     */
    public int calculateDigitsSum ( int input ) {
        logger.info ( "Inside calculateDigitsSum: " + input );
        int addition = 0;
        while (input > 0) {
            addition += input % 10;
            input = input / 10;
        }
        return addition;
    }

    /**
     * @param request
     * @return int
     * calculate the sum based on the corresponding alphabets
     */

    private int getAdditionByName ( final LuckyRequest request ) {
        logger.info ( "Inside calculateDigitsSum: " + request.getName () );

        int addition = 0;
        for (int i = 0; i < request.getName ().length (); i++) {
            addition += charValuesMap.get ( request.getName ().charAt ( i ) );
        }
        return addition;
    }

    /**
     * @param request
     * @return Map
     * This Method will generate the name suggetions based on the existing vowels in the name
     * If there are no vowels the names will be generated by shuffling existing characters in the name
     */
    private Map<Character, Set<String>> generateLuckyNames ( LuckyRequest request ) {
        logger.info ( "Generating lucky names " );
        Map<Character, Set<String>> luckyNamesMap = new HashMap<> ();
        List<Character> vowelsList = new ArrayList<> ();
        String name = request.getName ();
        //Get all vowels in the name to create suggetions
        for (int i = 0; i < name.length (); i++) {
            if (vowelsMap.containsKey ( name.charAt ( i ) )) {
                vowelsList.add ( name.charAt ( i ) );
            }
        }
        Character ch = null;
        if (vowelsList.size () != 0) {
            ch = vowelsList
                    .get ( getRandomVowelIndex ( vowelsList.size () ) );
            name += ch;
        }
        logger.debug ( "Generating lucky name with additional character " );

        Set<String> nameSet = new HashSet<> ();
        while (nameSet.size () < 3) {
            nameSet.add ( this.shuffle ( name ) );
        }
        luckyNamesMap.put ( ch, nameSet );
        return luckyNamesMap;
    }

    /**
     * This is the main method which makes use of generateLuckyNames method.
     *
     * @param request    Name of the user.
     * @param luckyNames dab of the user.
     * @return LuckyResponse.
     */
    private LuckyResponse createLuckyResponse ( LuckyRequest request, Map<Character, Set<String>> luckyNames ) {
        Map.Entry<Character, Set<String>> entry = luckyNames.entrySet ().stream ().findFirst ().get ();
        String output =
                request.getName ()
                        + " your lucky number doesn't match your name. Try adding additional "
                        + "'" + entry.getKey () + "'" + " in the name.";

        StringBuilder suggetions = new StringBuilder ();

        String prefix = "";

        for (String s : entry.getValue ()) {
            suggetions.append ( prefix );
            prefix = ",";
            suggetions.append ( s );
        }
        return new LuckyResponse ( output, suggetions.toString () );

    }

    private String shuffle ( String text ) {
        logger.debug ( "Shuffling the characters to  create additional names " );

        char[] characters = text.toCharArray ();
        for (int i = 0; i < characters.length; i++) {
            int randomIndex = (int) (Math.random () * characters.length);
            char temp = characters[i];
            characters[i] = characters[randomIndex];
            characters[randomIndex] = temp;
        }
        return new String ( characters );
    }

    public int getRandomVowelIndex ( int limit ) {
        return (int) (Math.random () * limit);
    }

    private LuckyRequest createLuckyRequest ( final String name, final String dob ) {

        return new LuckyRequest ( name.toUpperCase (), Utils.getFormattedDob ( dob ) );
    }
}